# üõ∞Ô∏è Networking & Enumeration
import socket
import nmap
import ipaddress
import dns.resolver
from scapy.all import *

# üåê Web Pentesting
import requests
from urllib.parse import urlparse, urljoin, urlencode
from http.client import HTTPConnection
from bs4 import BeautifulSoup

# üß™ Brute-forcing / Encoding
import itertools
import hashlib
import base64
import os
import glob

# ‚öôÔ∏è Automation & System
import subprocess
import threading
import concurrent.futures
import time
import random
import argparse
import sys
import re

# üìÇ Logging / Output
import json
import csv
import logging
from colorama import Fore, Style, init

# üé® Terminal color init
init(autoreset=True)

# üß† Main Entry Point
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="ü¶á GothPWN Core ‚Äî Modular Pentest Toolkit")
    parser.add_argument("-t", "--target", help="Target IP or URL")
    parser.add_argument("--scan", action="store_true", help="Run basic Nmap scan")
    parser.add_argument("--brute", action="store_true", help="Run credential brute-force (coming soon)")
    args = parser.parse_args()

    if not args.target:
        print(Fore.RED + "[!] You must provide a target with -t or --target.")
        sys.exit(1)

    if args.scan:
        print(Fore.CYAN + f"[+] Running Nmap scan on {args.target}...")
        try:
            nm = nmap.PortScanner()
            nm.scan(args.target, arguments="-sV -T4")
            for host in nm.all_hosts():
                print(Fore.GREEN + f"Host: {host} ({nm[host].hostname()})")
                for proto in nm[host].all_protocols():
                    lport = nm[host][proto].keys()
                    for port in sorted(lport):
                        service = nm[host][proto][port].get('name', 'unknown')
                        product = nm[host][proto][port].get('product', 'unknown')
                        print(Fore.YELLOW + f"  Port {port}/{proto} ‚Üí {service} ({product})")
        except Exception as e:
            print(Fore.RED + f"[!] Nmap scan failed: {e}")
            sys.exit(1)

    if args.brute:
        print(Fore.MAGENTA + "[*] Credential brute-force module coming soon...")
